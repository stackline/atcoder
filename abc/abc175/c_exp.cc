#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int main() {
  ll x, k, d;
  cin >> x >> k >> d;

  // x を正の座標にする
  x = abs(x);

  // x 座標から 0 に向かって移動可能な回数を算出する
  //
  // * 移動回数は基本 x/d 回だが、k < x/d の場合は k となる
  // * 0 を超えてマイナスには移動しない
  // * 最大でも座標 0 に着地する
  //   * 例えば x = 8, d = 4, k = 100 の場合
  //   * x/d = 8/4 = 2 で、2回 -4 側に移動し、x=0 に着地する
  //
  ll straight = min(k, x/d);

  // 座標と回数を変化させる
  k = k - straight;
  x = x - (straight * d);

  // 残りの移動回数が偶数回の場合
  //
  // * 移動して戻ってくるを繰り返すことで、現在の座標に留まることが、最小値となる
  // * 0の場合も同様
  //
  if (k % 2 == 0) {
    cout << x << endl;
  // 残りの移動回数が奇数回の場合
  //
  // * 偶数回往復を繰り返した後、最後に1回移動する
  // * この際、x は 0 以上の値となっているため、マイナス側に d だけ移動する
  // * マイナス座標となる可能性があるため、絶対値を abs で出力する
  //
  } else {
    cout << abs(x-d) << endl;
  }

  return 0;
}
