#include <bits/stdc++.h>
using namespace std;
using ll = long long;

// 計算量: O(log10(N))
int main() {
  cin.tie(nullptr); // Do not flush "cout" when processing "cin".

  ll n;
  cin >> n;

  // n の桁数
  int k = to_string(n).size();
  // n を3で割った余り
  int remainder = n % 3;

  // n を10進数展開して、各桁を3で割った余りの数を集計する
  vector<int> cnt(3);
  while (n > 0) {
    cnt.at(n % 10 % 3)++;
    n = n / 10;
  }

  int res = -1;
  // nが3の倍数の場合、削除不要
  if (remainder == 0) {
    res = 0;
  }
  // nが3で割ると1余る数の場合
  if (remainder == 1) {
    if (cnt.at(1) >= 1) {
      // 例: n = 4 について、4を消すと制約を満たさなくなる (1桁は残す)
      if (k == 1) {
        res = -1;
      } else {
        res = 1;
      }
    } else {
      // 「3で割ると1余る数字」が0件の場合、
      // 「nが3で割ると1余る数」となる条件は、nの各桁の数の内、
      // 2桁以上が「3で割ると2余る数字」で構成されていること。
      //
      //   例 : n = 583
      //   3桁目の 5 % 3 = 2
      //   2桁目の 8 % 3 = 2
      //   1桁目の 3 % 3 = 0
      //   各桁の余りの合算 = 2 + 2 + 0 = 4
      //   --> 3桁目と2桁目を削除すると、3で割りきれる数となる。
      //
      // 一方で n が2桁の場合（k = 2 の場合）はいずれかの1桁を削除した場合、
      // 3で割った余りが 2 となるため、3で割り切れる数とならない。
      //
      //   例 : n = 58
      //   2桁目の 5 % 3 = 2
      //   1桁目の 8 % 3 = 2
      //   --> いずれの桁を削除しても、3で割り切れない数となる。
      //
      if (k == 2) {
        res = -1;
      } else {
        res = 2;
      }
    }
  }
  // nが3で割ると2余る数の場合
  if (remainder == 2) {
    // 「3で割ると2余る数」が存在するなら、その桁のみ削除でOK
    // ただし n が1桁の場合は、桁を削除できないため、3で割りきれる数は作れない。
    if (cnt.at(2) >= 1) {
      if (k == 1) {
        res = -1;
      } else {
        res = 1;
      }
    } else {
      // cnt.at(1) >= 2 && k >= 3 であることが必要
      //
      // k == 2 の場合、cnt.at(1) な数2つで構成されている。
      //
      //   例: 44
      //   --> この場合、2桁とも削除することで3で割り切れる数となる。
      //       一方で制約で全桁は削除できないため、成立しない。
      //
      if (k == 2) {
        res = -1;
      } else {
        res = 2;
      }
    }
  }
  cout << res << endl;
}
