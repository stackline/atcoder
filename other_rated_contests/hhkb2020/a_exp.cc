#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int main() {
  cin.tie(nullptr); // Do not flush "cout" when processing "cin".

  char s, t;
  cin >> s >> t;

  // ### 大文字
  // irb> "A".ord
  // irb> => 65
  // irb> "A".ord.to_s(2)
  // irb> => "1000001"
  // irb> "Z".ord
  // irb> => 90
  // irb> "Z".ord.to_s(2)
  // irb> => "1011010"
  //
  // ### 小文字
  // irb> "a".ord
  // irb> => 97
  // irb> "a".ord.to_s(2)
  // irb> => "1100001"
  // irb> "z".ord
  // irb> => 122
  // irb> "z".ord.to_s(2)
  // irb> => "1111010"
  //
  // ### 差分
  // irb> "a".ord - "A".ord
  // irb> 32
  // irb> "z".ord - "Z".ord
  // irb> 32
  //
  // アルファベット: A-Z の26文字
  // 記号: [ \ ] ^ _ ` の6文字
  // 合計32文字分、アルファベットの小文字と大文字で文字コードがズレる
  //
  // ### xor演算で大文字から小文字に変換する
  //
  // 文字列 a  の2進数表現は 1100001 である。
  // 10進数 32 の2進数表現は 0100000 である。
  // 例として、文字列 a を A に変換する。
  //
  // # 10進数の場合
  //
  // 97 - 32 = 65 である。
  //
  // # 2進数の場合
  //
  // 1100001 xor 100000 = 1000001
  //
  // 縦に並べて計算すると以下になる。
  //
  //       0110 0001
  //   xor 0010 0000
  //   -------------
  //     = 0100 0001
  //
  // xor演算で6桁目の bit を 1 から 0 にする。
  //
  //     0  1  0  0  0  0  0  1
  //   128 64 32 16  8  4  2  1
  //
  // 元の数字から -32 となり、97 - 32 = 65 となる。
  //
  // ### xor演算で大文字から小文字に変換する
  //
  // 小文字から大文字に変換する方法の逆を行う。
  // 特定の英大文字の文字コードに +32 する。
  //
  // xor演算で行う場合は以下となる。
  //
  // 文字列 A  の2進数表現は 1000001 である。
  // 10進数 32 の2進数表現は 0100000 である。
  //
  // 1000001 xor 100000 = 1100001
  //
  // 縦に並べて計算すると以下になる。
  //
  //       0100 0001
  //   xor 0010 0000
  //   -------------
  //     = 0110 0001
  //
  //     0  1  1  0  0  0  0  1
  //   128 64 32 16  8  4  2  1
  //
  // 2進数の6桁目、32を表すビットを xor 演算で 0 から 1 に変更した。
  // 10進数では +32 となり、65 + 32 = 97 より、小文字 a の文字コードを表す。
  //
  if (s == 'Y') {
    t = t ^ 32;
  }

  cout << t << endl;
  return 0;
}
