#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int main() {
  int n;
  cin >> n;
  vector<int> a(n+1);
  for (int i = 0; i < n; i++) {
    cin >> a.at(i+1);
  }

  vector<ll> dp(n+1);
  // 0日目の株価の売買が終了した後の所持金
  dp.at(0) = 1000;
  // 1日目からN日目の、株価の売買が終了した後の所持金の最大を求める
  for (int k = 1; k <= n; k++) {
    dp.at(k) = 0;
    // k = 株の売却日
    // i = 起点日
    // m = 起点日の翌日から売却日の前日の間で、最も安い株価
    //
    // 株価の変動を以下と仮定する
    //
    //   100 130 130 130 115 115 150
    //
    // k=1の場合、つまり1日目の終了時
    //
    //   0日目の終了日から1日目の間で、購入タイミングが無いためスキップ
    //
    // k=2の場合、つまり2日目の終了時
    //
    //   k=2
    //   i=0
    //   m=100 の一択
    //   dp[2] = max(dp[2], dp[0]/100*a[2] + dp[0]%100)
    //         = max(0, 1000/100*130 + 1000%100)
    //         = max(0, 1300)
    //         = 1300
    //
    // k=7の場合、つまり7日目の終了日
    //
    //   k=7
    //   i=0
    //   m=100
    //   dp[7] = max(dp[7], dp[0]/100*150 + dp[0]%100)
    //         = max(0, 1000/100*150 + 1000%100)
    //         = max(0, 1500)
    //         = 1500
    //
    //   // 株の売却日が最終日 k=7
    //   // 株の売買を終了した日 (起点日) は i=2
    //   // その翌日 3日〜6日の間で、最小の株価を調べる m=115
    //   // 1株115円で株を購入し、7日目に150円で売却する
    //   // この際、i=2 つまり2日目の終了日の所持金の最大値は 1300 円
    //   //   これは k=2 の時に算出したもの
    //   //
    //   // これらより、2日目の終了日に1300円保持している状態で、
    //   // 3〜6日目に115円で株を最大限に購入し、7日目に150円で売却し、
    //   // 所持金が1685円になる
    //
    //   k=7
    //   i=2
    //   m=115
    //   dp[7] = max(dp[7], dp[2]/115*150 + dp[2]%100)
    //         // k=2 の時に取りうる所持金の最大は1300
    //         //
    //         //   dp[2] = 1300
    //         //
    //         // これはループの k=2 の時に既に求めている
    //         = max(1500, 1300/115*150 + 1300%115)
    //         = max(0, 1650 + 35)
    //         = max(0, 1685)
    //         = 1685
    //
    //  k=5の場合、所持金の最大値は1150となる
    //  k=2の場合、所持金が1300となるが、3日〜4日に130円で株を購入し、
    //  5日目に115円で売却するケースをシミュレーションすると、1株15円損するため
    //  所持金が1150円となる
    //
    for (int i = 0; i < k-1; i++) {
      int m = 99999;
      for (int j = i+1; j < k; j++) {
        m = min(m, a.at(j));
      }
      // cout << "[from] k: " << k << ", i: " << i << ", dp[" << k << "]" << dp.at(k) << endl;
      dp.at(k) = max(dp.at(k), dp.at(i) / m * a.at(k) + dp.at(i) % m);
      // cout << "[to  ] k: " << k << ", i: " << i << ", dp[" << k << "]" << dp.at(k) << endl;
    }
  }

  // i と k で表す全パターンの期間について、
  // * 株価が下落して所持金が減額するケースも含めて必ず1回株を売買する、　
  // * その1回の株の売買は、所持金が最大となるようにする（減額であれば、最小となるようにする）
  //
  // 最後に全パターンの所持金を比較して、最大の所持金を選択する
  ll ans = 0;
  for (int i = 0; i < n+1; i++) {
    ans = max(ans, dp.at(i));
  }
  cout << ans << endl;
  return 0;
}
